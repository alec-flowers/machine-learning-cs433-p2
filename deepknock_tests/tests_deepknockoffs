import scipy.io
import numpy as np
import pandas as pd
import statsmodels.api as sm
import scipy.cluster.hierarchy as spc
import seaborn as sns

import matplotlib
import matplotlib.pyplot as plt

from input_output import load
from deepknockoffs.examples import data
from deepknockoffs.examples import parameters

from DeepKnockoffs import KnockoffMachine
from DeepKnockoffs import GaussianKnockoffs


# load the data
hrf = load.load_hrf_function()
fMRI = load.load_hrf(task='MOTOR')
task_paradigms = load.load_task_paradigms('MOTOR')


# Compute the empirical covariance matrix of the training data
SigmaHat = np.cov(fMRI[0,:,:], rowvar=False)

# Initialize generator of second-order knockoffs
mu = np.mean(fMRI[0,:,:], 0)
second_order = GaussianKnockoffs(SigmaHat, mu=np.mean(fMRI, 0), method="sdp")

# Measure pairwise second-order knockoff correlations
corr_g = (np.diag(SigmaHat) - np.diag(second_order.Ds)) / np.diag(SigmaHat)

print('Average absolute pairwise correlation: %.3f.' %(np.mean(np.abs(corr_g))))